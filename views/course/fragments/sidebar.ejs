<style>
    @media only screen and (max-width: 766px) {
        #sidebar {
            display: none;
        }
    }

    .add {
        align-items: center;
    }

    .active_topic {
        color: #F4F4F4;
        background-color: rgb(28, 49, 74);
    }

    .btn-outline-primary:hover {
        background-color: rgb(28, 49, 74) !important;
    }

    .chn {
        position: relative;
        right: 70px;
    }

    .heading {
        display: inline-block;
    }

    .list-unstyled:hover {
        color: rgb(28, 49, 74);
    }

    .mb-4 {
        color: #696969;
    }

    .topic {
        padding: 10px;
    }

    .topic:hover {
        cursor: pointer;
        color: #f5f2f0;
        font-weight: bolder;
        background: rgb(28, 49, 74);
        /* background: #383e56; */
        padding: 10px;
    }

    .sidebar-header {
        color: #f5f2f0;
        background: rgb(28, 49, 74);
        /* background: #383e56; */
        padding: 10px;
        margin-bottom: 0.25rem;
    }

    .save_content {
        /* position: absolute;
        right: 0; */
        margin-top: 0.7rem;
        float: right;
        vertical-align: top;
    }

    .user_body {
        background-color: #f5f2f0;
        margin-bottom: 1.35rem;
    }


</style>
<div class="wrapper row" id="courseApp">
    <div class="col-lg-3 col-md-5" id="sidebar">
        <div class="sidebar-header">
            <h3>{{course_name}}</h3>
            <button type="button" class="btn btn-primary add" @click="add_course_heading">Add Topics</button>

        </div>
        <ul class="list-unstyled components">
            <li v-for="item in course_data_list"
                class="topic" :class="{active_topic: item.id===showcase.id}">
                <a class="link" style="cursor: pointer;"
                   :href="'/course?course_id='+course_id+'&topic_id='+item.id">
                    {{item.title}}
                </a>
            </li>
        </ul>
    </div>
    <div class="col-lg-8 col-md-7" class="wrapper d-flex align-items-stretch">
        <div id="content" class="p-4 p-md-5 pt-5 container">
            <h1 class="mb-4 heading" v-if="showcase">{{showcase.title}}</h1>
            <button type="button" class="btn btn-success save_content" @click="save_data">Save Body</button>
            <div id="editorjs" class="user_body"></div>
            <button type="button" class="btn btn-info" @click="next">Next</button>
        </div>
        <div class="col col-sm-12">

        </div>
    </div>
</div>
<script type="text/javascript">
    let courseApp = new Vue({
        el: "#courseApp",
        data: {
            course_name: "",
            course_id: "",
            course_data_list: [],
            showcase: {
                title: "Dummy"
            }
        },
        methods: {
            add_course_heading: () => {
                alertify.prompt("This is a prompt dialog.", "Add your course here",
                    function (evt, value) {
                        fetchMyDB(`mutation MyMutation($title: String = "", $course_id: uuid = "") {
                                          insert_course_data(objects: {title: $title, course_id: $course_id}) {
                                            affected_rows
                                            returning {
                                              id
                                              body
                                              title
                                            }
                                          }
                                        }`, {
                            course_id: courseApp.course_id,
                            title: value
                        })
                            .then(res => {
                                console.log(res);
                                if (res.data.insert_course_data.affected_rows > 0) {
                                    alertify.success('Topic Added!');
                                    courseApp.course_data_list.push(res.data.insert_course_data.returning[0]);
                                    courseApp.showcase = res.data.insert_course_data.returning[0];
                                }
                            }).catch(err => console.error(err));
                    },
                    function () {
                        alertify.error('Cancelled!');
                    });
            },
            add_course_body: (body) => {
                fetchMyDB(`mutation MyMutation($body: String = "", $id: uuid = "") {
                              update_course_data(where: {id: {_eq: $id}}, _set: {body: $body}) {
                                affected_rows
                                returning {
                                  body
                                  id
                                  title
                                }
                              }
                            }`, {
                    id: courseApp.showcase.id,
                    body: JSON.stringify(body)
                }).then(res => {
                    console.log(res);
                    if (res.data.insert_course_data.affected_rows > 0) {
                        alertify.success('Body Added!');
                        courseApp.course_data_list.push(res.data.insert_course_data.returning[0]);
                        courseApp.showcase = res.data.insert_course_data.returning[0];
                    }
                }).catch(err => console.error(err));
            },
            get_data: (course_id = "", topic_id = 0) => {
                courseApp.course_id = course_id;
                fetch('https://lmsdb.herokuapp.com/v1/graphql', {
                    method: "post",
                    headers: {
                        "content-type": "application/json",
                        "x-hasura-admin-secret": "joeydash"
                    },
                    body: JSON.stringify({
                        query: `query MyQuery($course_id: uuid = "") {
                                  courses(where: {id: {_eq: $course_id}}) {
                                    name
                                    course_data {
                                      body
                                      title
                                      id
                                    }
                                  }
                                }`,
                        variables: {
                            "course_id": course_id
                        }
                    })
                }).then(result => result.json()).then(result => {
                    // console.log(JSON.stringify(result));
                    courseApp.course_name = result.data.courses[0].name;
                    courseApp.course_data_list = result.data.courses[0].course_data;
                    if (isNaN(topic_id)) {
                        console.log(_.findIndex(result.data.courses[0].course_data, {'id': topic_id}))
                        courseApp.showcase = result.data.courses[0].course_data[_.findIndex(result.data.courses[0].course_data, {'id': topic_id})];
                        courseApp.mount_editor();
                    } else {
                        courseApp.showcase = result.data.courses[0].course_data[topic_id]
                        courseApp.mount_editor();
                    }
                }).catch(err => console.error(err));
            },
            mount_editor: () => {
                courseApp.editor = new EditorJS({
                    holder: 'editorjs',
                    tools: {
                        header: {
                            class: Header,
                            inlineToolbar: ['link'],
                            config: {
                                placeholder: 'Header'
                            },
                            shortcut: 'CMD+SHIFT+H'
                        },
                        image: {
                            class: SimpleImage,
                            inlineToolbar: ['link'],
                        },
                        list: {
                            class: List,
                            inlineToolbar: true,
                            shortcut: 'CMD+SHIFT+L'
                        },
                        checklist: {
                            class: Checklist,
                            inlineToolbar: true,
                        },
                        quote: {
                            class: Quote,
                            inlineToolbar: true,
                            config: {
                                quotePlaceholder: 'Enter a quote',
                                captionPlaceholder: 'Quote\'s author',
                            },
                            shortcut: 'CMD+SHIFT+O'
                        },
                        warning: Warning,
                        marker: {
                            class: Marker,
                            shortcut: 'CMD+SHIFT+M'
                        },
                        code: {
                            class: CodeTool,
                            shortcut: 'CMD+SHIFT+C'
                        },
                        delimiter: Delimiter,
                        inlineCode: {
                            class: InlineCode,
                            shortcut: 'CMD+SHIFT+C'
                        },
                        linkTool: LinkTool,
                        embed: Embed,
                        table: {
                            class: Table,
                            inlineToolbar: true,
                            shortcut: 'CMD+ALT+T'
                        },
                    },
                    // initialBlock: 'paragraph',
                    data: JSON.parse(courseApp.showcase.body),
                    onReady: function () {
                        // saveButton.click();
                    },
                    onChange: function () {
                        console.log('something changed');
                    }
                });
            },
            save_data: () => {
                courseApp.editor.save().then((savedData) => {
                    courseApp.add_course_body(savedData);
                });
            },
            next: () => {

            }
        },
        mounted: function () {
            this.$nextTick(function () {
                courseApp.get_data(findGetParameter('course_id') === null ? "" : findGetParameter('course_id'), findGetParameter('topic_id') === null ? 0 : findGetParameter('topic_id'));
            })
        }
    });


    // const saveButton = document.getElementById('saveButton');


    // saveButton.addEventListener('click', function () {
    //     editor.save().then((savedData) => {
    //         cPreview.show(savedData, document.getElementById("output"));
    //     });
    // });
</script>
